<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="\public\reset.css">
    <link rel="stylesheet" href="\public\put.css">
    <link rel="stylesheet" href="\public\indexstyle.css"> 
    <link rel="stylesheet" href="\public\mainstyle.css"> 
	<link rel="stylesheet" href="\public\canvas.css">
    <link rel="stylesheet" href="\public\comments.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
 
<style>

</style>
    <title>강의실</title>
</head>
<body>
    <script  src="https://unpkg.com/peerjs@1.4.7/dist/peerjs.min.js"></script>   
    <script  src="/socket.io/socket.io.js" >  </script>
   
  
    <script  src="https://code.jquery.com/jquery-3.6.0.min.js"> </script>
    <script  src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.1/socket.io.js" integrity="sha512-9mpsATI0KClwt+xVZfbcf2lJ8IFBAwsubJ6mI3rtULwyM3fBmQFzj0It4tGqxLOGQwGfJdk/G+fANnxfq9/cew==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script  src="https://unpkg.com/default-passive-events"></script>
    
    

    <button style="width: 10%; float: right; margin-right: 1%;" id="mute">마이크 끄기</button> 
    <button style="width: 10%; float: right; margin-right: 1%;" id="startButton"  disabled>화면 공유</button> 
    <br>
    <br>
    <div id="cv">
        <div class="container" id="cv">
            <section class="tools-board" >
              <div class="row">
                <label class="title">Shapes</label>
                <ul class="options">
                  <li class="option tool" id="rectangle">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16.301" height="16.301" viewBox="0 0 16.301 16.301">
                        <path id="square-regular" d="M13.972,32A2.33,2.33,0,0,1,16.3,34.329V45.972A2.331,2.331,0,0,1,13.972,48.3H2.329A2.33,2.33,0,0,1,0,45.972V34.329A2.329,2.329,0,0,1,2.329,32Zm0,1.747H2.329a.582.582,0,0,0-.582.582V45.972a.583.583,0,0,0,.582.582H13.972a.584.584,0,0,0,.582-.582V34.329A.583.583,0,0,0,13.972,33.747Z" transform="translate(0 -32)" fill="#5a6168"/>
                      </svg>
                       
                    <span></span>
                  </li>
                  <li class="option tool" id="circle">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16.301" height="16.301" viewBox="0 0 16.301 16.301">
                        <path id="circle-regular" d="M16.3,8.15A8.15,8.15,0,1,1,8.15,0,8.15,8.15,0,0,1,16.3,8.15ZM8.15,1.528A6.622,6.622,0,1,0,14.773,8.15,6.621,6.621,0,0,0,8.15,1.528Z" fill="#5a6168"/>
                      </svg> 
                      
                    <span></span>
                  </li>
                  <li class="option tool" id="triangle">
                    <svg xmlns="http://www.w3.org/2000/svg" width="17.874" height="15.711" viewBox="0 0 17.874 15.711">
                        <path id="triangle" d="M19.75,17.574,11.71,3.656a.893.893,0,0,0-1.554,0L2.116,17.574a.893.893,0,0,0,.777,1.34h16.08a.893.893,0,0,0,.777-1.34ZM4.438,17.127,10.933,5.889l6.495,11.238Z" transform="translate(-1.996 -3.203)" fill="#5a6168"/>
                      </svg>
                        
                    <span></span>
                  </li>
                  <li class="option">
                    <input type="checkbox" id="fill-color">
                    <label for="fill-color" >Fill color</label>
                  </li>
                </ul>
              </div>
              <div class="row">
                <label class="title">Options</label>
                <ul class="options">
                  <li class="option active tool" id="brush">
                    <svg xmlns="http://www.w3.org/2000/svg" width="14.445" height="14.462" viewBox="0 0 14.445 14.462">
                        <path id="Path_153" data-name="Path 153" d="M8.319,8.378l6.014-6.535a.4.4,0,0,0-.024-.577L13.155.111a.4.4,0,0,0-.553,0L6.066,6.125a.4.4,0,0,0,0,.577L7.742,8.378a.4.4,0,0,0,.577,0Zm-3.44-.89,2.093,2.1a.8.8,0,0,1,.249.457v.393a3.208,3.208,0,0,1-.938,2.277,6.223,6.223,0,0,1-4.739,1.732,2.326,2.326,0,0,1-1.427-.481.4.4,0,0,1-.048-.505,4.772,4.772,0,0,0,.714-2.609A3.626,3.626,0,0,1,1.744,8.17a3.208,3.208,0,0,1,2.269-.938,3.134,3.134,0,0,1,.393,0A.874.874,0,0,1,4.879,7.488Z" fill="#5a6168" fill-rule="evenodd"/>
                      </svg> 
                    <span></span>
                  </li>
                  <li class="option tool" id="eraser">
                    <svg xmlns="http://www.w3.org/2000/svg" width="17.093" height="16.301" viewBox="0 0 17.093 16.301">
                        <path id="bx-eraser" d="M2.543,14.46l3.985,3.985a.923.923,0,0,0,.655.272H18.309V16.862h-6.45l6.695-6.695a1.855,1.855,0,0,0,0-2.622l-4.59-4.589a1.857,1.857,0,0,0-2.622,0l-4.4,4.4L2.532,11.849a1.86,1.86,0,0,0,.011,2.61ZM12.653,4.268l4.589,4.589-2.4,2.4L10.256,6.665l2.4-2.4Zm-4.4,4.4.689-.688,4.589,4.589L9.31,16.789a.951.951,0,0,0-.064.073H7.568L3.855,13.148l4.4-4.484Z" transform="translate(-2.003 -2.416)" fill="#5a6168"/>
                      </svg> 
                      
                    <span></span>
                  </li>
                  <li class="option">
                    <input type="range" id="size-slider" min="1" max="30" value="5">
                  </li>
                </ul>
              </div>
              <div class="row colors">
                <label class="title">Colors</label>
                <ul class="options">
                  <li class="option"></li>
                  <li class="option selected"></li>
                  <li class="option"></li>
               
                  <li class="option">
                    <input type="color" id="color-picker" value="#4A98F7">
                  </li>
                </ul>
              </div>
              <div class="row buttons">
                <button class="clear-canvas">Clear</button>
             
              </div>
            </section>
            <section class="drawing-board">
              <canvas id='a' width="1150px" height="550vh"></canvas>
              <script src="\public\drawing.js"></script>
            </section>
          </div>


    </div>

    

    <video id="video" style="margin-bottom: 1%; border: 1px solid black;" width="1150px" height="550vh" autoplay></video>         
    <video id="peersvideo" style="margin-bottom: 1%; border: 1px solid black; margin-left: 16px;" width="1150px" height="550vh" autoplay></video> 
    <video id='sharevideo' style="margin-top: 2%; border: 1px solid black;" width="1150px" height="550vh" autoplay></video>

    <div class="servetext2"style="float: right; margin-top:2%; margin-right:10px">
   
    <div id="count" >카운트</div>
    <hr size="5" width="150px" noshade>
    <div>강의자: <%=강의자%></div>
    
    <hr size="5" width="150px" noshade>
    <div >참여자 리스트</div>
    <hr size="5" width="150px" noshade>    
    <div id="list"></div>       
   </div>


    <div id="chatbox" style=" float:left; width:50%; height: 10vh; overflow: auto; white-space: nowrap; border: 1.2px solid black; margin-left: 16px;">
        <div id="chat"></div>  
             
    </div>   

    <input type="text" id="msg" style="width: 50%; padding: 5px; margin-left: 16px; "required>
    <button class="btn2" id="send" style="width: 10%; ">채팅하기</button>       

    <i class="fa fa-file-image-o" data-icon="img" style="float:right; margin-right: 3%;font-size: 38px;color: #547ef89e;cursor: pointer; width: 50px;height: 45px;text-align: center;"></i>
    <div id="hand" style="float:right; margin-right: 3%;">
    <i class="fa fa-hand-paper-o" data-icon="noti" style="font-size: 38px;color: #547ef89e;cursor: pointer; width: 50px;height: 45px;text-align: center;"></i>    
    </div>
    
    
    <form action="/done" method="post">
        <input type="hidden" id='number' name='postnum' value="<%=글번호%>">
        <button type="submit" id="exit" onclick="javascript:exitmg()" style=" float:left; background-color: #4657d3;color: white;padding: 5px 10px;margin: 8px 0;border: none;cursor: pointer;width: 100%;" >수업 종료하기</button>
        
    </form>

    <div class="notification-container" id="notification-container">
        
    </div>
     
    <div id="myStreamv">
       
        
    </div>
    
    <div id="errorMsg"></div>

    <script>
        
        var socket=io();   

        const pvideo = document.getElementById("peersvideo");
        const myvideo=document.getElementById('video');
        //const canv = document.getElementById("a");
      
        const muteBtn = document.getElementById("mute");
        const sharevideo = document.getElementById('sharevideo');
        

        var currentPeer=new Array();
        var screenSharing = false;

        let myStream;
        let myVideo;
        let sendvideo;
        let share;
        let voice;
        let muted=true;
        var id;


    muteBtn.addEventListener("click", handleMuteClick);
    const startButton = document.getElementById('startButton');

    startMedia();

    const myPeer=new Peer(undefined,{
        secure:true,
        host:'teaching1901131.herokuapp.com',
        port:'443',
        path: "peerjs"
        
    });
    myPeer.on('open',function(id){
        socket.emit('joinroom', '<%=글번호%>',id); 
        socket.emit('user-send','<%=사용자.nick%>님께서 접속하였습니다.');
        console.log('peer');
    }); 
  
    socket.on('count',function(data){
        var list=new Array();
        for(var i=0;i<data.length; i++){
            if('<%=글번호%>'==data[i]['room']){
                list.push({ socket:data[i]['socket']
                ,  room : String('<%=글번호%>') 
                , user : data[i]['user']  
                })  
            }}
        console.log(list);
       document.getElementById('count').innerHTML='현재 참여자 수:'+list.length+'명';
      
       $("#list *").remove(); 
        for(var i=0;i<list.length;i++){
            $('#list').append('<div>' +list[i]['user']+'</div>');
       }   
    });

    socket.on('bye',function(data){
        $('#chat').append('<div>' +data+'님께서 떠나셨습니다.'+'</div>');
    });      


    $('#send').click(function(){
    socket.emit('user-send','<%=사용자.nick%>님'+' : '+ $('#msg').val());
    });

    socket.on('broadcast', function(data) {
    $('#chat').append('<div>' +data + '</div>');
    });

    socket.on('exit',function(){
        location.replace('/board/<%=글번호%>');
    });

    socket.on('alarm',function(data){

        $("#notification-container").append('<p>'+ '🖐 '+data+'님이 손을 들었습니다.'+'</p>'); 
        showNotification();
    });

    $('#msg').keypress(function(event){
        if ( event.which == 13 ) {
        $('#send').click();
        return false;
    }
    });

    $('i').click(function(e){
        if(e.target.dataset.icon=='img'){
            document.getElementById('tu01').style.display='block'  
        }
        else if(e.target.dataset.icon=='noti'){
            socket.emit('notifi','<%=사용자.nick%>');
            
        }                             
        });

    const $chatbox = $('#chatbox'); 
    $chatbox.scrollTop($chatbox[0].scrollHeight);

    startButton.addEventListener('click', () => {
        sharevideo.hidden=false;
        cv.hidden=true;
        navigator.mediaDevices.getDisplayMedia({video: true})
            .then(handleSuccess, handleError);
        });

        if ((navigator.mediaDevices && 'getDisplayMedia' in navigator.mediaDevices)) {
        startButton.disabled = false;
        
        } else {
        errorMsg('getDisplayMedia is not supported');
        }

    async function getMedia() {
    myvideo.muted = true;//뮤트
        try {
            myStream = await navigator.mediaDevices.getUserMedia(
            {
                video:false,
                audio:true,
            })

            console.log(myStream);
                  
            voice=myStream.getAudioTracks();
            
        } catch (e) {
            console.log(e);
        }    
        
        const canvas = document.querySelector('canvas');
       // canvas.getContext('2d', {willReadFrequently: true});

        const mediaStream = canvas.captureStream();
        
        
        //const mediaStream = canv.captureStream();
        

        myVideo=mediaStream;     
        myvideo.srcObject = myVideo;
        console.log(myVideo);
        //const mStream=myvideo.captureStream(); 

        sendvideo=myvideo.srcObject;
        sendvideo.addTrack(voice[0]);
        
        console.log(sendvideo.getVideoTracks());
        //sharevideo.addTrack(voice[0]);//새로 추가함 0830

        myPeer.on('call',function(call){
            console.log('answer');   
                    
            call.answer(sendvideo); 
            call.on('stream',function(userVideoStream){   
                const sharevoice=document.createElement('audio');
                addaudio(sharevoice,userVideoStream);

                console.log('비디오 값 넣기');
        });           
            
            //currentPeer = call;
            currentPeer.push(call);
            console.log(currentPeer);
        }); 

        socket.on('user-connected',function(userid){
            console.log('유저연결: '+userid);
            
            setTimeout(connectNewUser,1000,userid,sendvideo);
                
        });   
       
    }

    function connectNewUser(userid,stream){
        console.log('connet 함수');
        const call = myPeer.call(userid, stream);

        call.on('stream',function(userVideoStream){   
                        
              pvideo.srcObject=userVideoStream;  
              myvideo.srcObject=userVideoStream;

              const sharevoice2=document.createElement('audio');
                addaudio(sharevoice2,userVideoStream);
             
            //console.log(myvoice.srcObject);             
            console.log('비디오 값 넣기');
        });
       
        //currentPeer = call;
        currentPeer.push(call);
        console.log(currentPeer);
    }


    function handleMuteClick() {  

        console.log(myStream.getAudioTracks());
        
        myStream.getAudioTracks().forEach((track) => track.enabled = !track.enabled);
        if(!muted) {
            
            muteBtn.innerText = "마이크 끄기";
            muted = true;
        }
        else {
             
            muteBtn.innerText = "마이크 키기";
            muted = false;               
        }
    }

    function handleSuccess(stream) {
        startButton.disabled = true;
        sharevideo.srcObject = stream;
        share=stream;
    
        let videoTrack = share.getVideoTracks()[0];
   
        console.log(currentPeer);

        currentPeer.forEach((Peer)=>{
            let sender = Peer.peerConnection.getSenders().find(function (s) {
                return s.track.kind === videoTrack.kind;
            })  
            sender.replaceTrack(videoTrack);          
            console.log('바꿈');  
        });
           
            screenSharing = true;
        

        // demonstrates how to detect that the user has stopped
        // sharing the screen via the browser UI.
        stream.getVideoTracks()[0].addEventListener('ended', () => {
            errorMsg('The user has ended sharing the screen');
            startButton.disabled = false;
            sharevideo.hidden=true;
            cv.hidden=false;

            if (!screenSharing) return;

            let videoTrack = sendvideo.getVideoTracks()[0];

            currentPeer.forEach((Peer)=>{
            let sender = Peer.peerConnection.getSenders().find(function (s) {
                return s.track.kind === videoTrack.kind;
            })  
            sender.replaceTrack(videoTrack);  
            
            });  
            screenSharing = false;

        });
             
        }

        function handleError(error) {
        errorMsg(`getDisplayMedia error: ${error.name}`, error);
        }

        function errorMsg(msg, error) {
        console.log(msg);
        if (typeof error !== 'undefined') {
            console.error(error);
            console.log(error);
            
        }
        }

    function startMedia(){
    if('<%=사용자.nick%>'=='<%=강의자%>'){
        sharevideo.hidden=true;
        myvideo.hidden=true;
        pvideo.hidden=true;  
        hand.hidden=true;
        $('#chat').append('<div>' +'강의자 화면입니다.'+'</div>');

    }else{
        sharevideo.hidden=true;
        startButton.hidden=true;
        cv.hidden=true;
        exit.hidden=true;
        myvideo.hidden=true;
    }
     getMedia();
    }

    function addaudio(audio,stream){
        audio.srcObject=stream;
        console.log(audio.srcObject);
        audio.addEventListener('loadedmetadata', () => {
            audio.play();
        })
        $("#myStreamv").append(audio);
    }

    function exitmg(){
        socket.emit('user-send','수업이 종료되었습니다.');
        socket.emit('done');
    }
    </script>

    <div id="tu01" class="modal" >
        <form class="modal-content animate" action="123" method="post">
           
          <div class="container" style="background-color:#f1f1f1">
            
            <img class="modal-target" alt="Img 1" src="/public/image/<%=글번호%>.png" />
           
          </div>
      
          <div class="container" style="background-color:#f1f1f1">
            <button type="button" onclick="document.getElementById('tu01').style.display='none'" class="cancelbtn">Cancel</button>
          </div>               
           

        </form>
      </div> 

      
      <script>
        // Get the modal
        var modal = document.getElementById('tu01');
        
        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }
        </script>
    <script>

        const notification = document.getElementById('notification-container');
      
        function showNotification(){
            notification.classList.add('show')
            setTimeout(() => {
                notification.classList.remove('show')
                $("#notification-container").empty(); 
            }, 1500)   
                     
        }

    </script>

    <script>



    </script>

    <script>

    </script>
</body>
</html>